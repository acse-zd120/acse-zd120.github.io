<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java多线程</title>
      <link href="/archives/11bde6ec.html"/>
      <url>/archives/11bde6ec.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线性代数方程的解法——Linear Solvers</title>
      <link href="/archives/f77cbf0a.html"/>
      <url>/archives/f77cbf0a.html</url>
      
        <content type="html"><![CDATA[<h1 id="线性代数方程组的解法————Linear-Solvers"><a href="#线性代数方程组的解法————Linear-Solvers" class="headerlink" title="线性代数方程组的解法————Linear Solvers"></a>线性代数方程组的解法————Linear Solvers</h1><ul><li><h2 id="插值和曲线拟合"><a href="#插值和曲线拟合" class="headerlink" title="插值和曲线拟合"></a>插值和曲线拟合</h2><p>插值的即为根据已知点求解出经过所有点的方程，其过程中不存在舍入误差。而曲线拟合即为根据众多已知点（一个x值对应多个y值），这些点之中可能存在很多错误的观测值，拟合出一条相对正确的函数曲线，往往存在舍入误差，经典方法为最小二乘法（least squares curve fitting）。</p></li><li><h3 id="范德蒙表达式的求解中需要计算矩阵的逆矩阵，若矩阵阶数较大则人工计算起来较为麻烦，python对应计算矩阵转置的函数为Scipy包中的sl-inv-来计算："><a href="#范德蒙表达式的求解中需要计算矩阵的逆矩阵，若矩阵阶数较大则人工计算起来较为麻烦，python对应计算矩阵转置的函数为Scipy包中的sl-inv-来计算：" class="headerlink" title="范德蒙表达式的求解中需要计算矩阵的逆矩阵，若矩阵阶数较大则人工计算起来较为麻烦，python对应计算矩阵转置的函数为Scipy包中的sl.inv()来计算："></a>范德蒙表达式的求解中需要计算矩阵的逆矩阵，若矩阵阶数较大则人工计算起来较为麻烦，python对应计算矩阵转置的函数为Scipy包中的sl.inv()来计算：</h3><pre class="line-numbers language-Py{.line-numbers}"><code class="language-Py{.line-numbers}">x = [1,2,3]y = [5,6,7]V = np.vander(x, increasing=True)#increasing表示x的次数从左到右逐渐增加invV = sl.inv(V)#求矩阵的逆矩阵<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><h2 id="为什么上面先讲到插值与曲线拟合呢？因为事实上求解插值函数的过程就是一个求解线性方程组的过程。具体来说，求解插值函数即为已知多项式的x与y值，求解系数；而求解线性方程组为已知系数求解结果。但是系数和解值本身没有区别，根本在于判断哪些是未知数，哪些是已知数，然后构造系数矩阵求解。"><a href="#为什么上面先讲到插值与曲线拟合呢？因为事实上求解插值函数的过程就是一个求解线性方程组的过程。具体来说，求解插值函数即为已知多项式的x与y值，求解系数；而求解线性方程组为已知系数求解结果。但是系数和解值本身没有区别，根本在于判断哪些是未知数，哪些是已知数，然后构造系数矩阵求解。" class="headerlink" title="为什么上面先讲到插值与曲线拟合呢？因为事实上求解插值函数的过程就是一个求解线性方程组的过程。具体来说，求解插值函数即为已知多项式的x与y值，求解系数；而求解线性方程组为已知系数求解结果。但是系数和解值本身没有区别，根本在于判断哪些是未知数，哪些是已知数，然后构造系数矩阵求解。"></a>为什么上面先讲到插值与曲线拟合呢？因为事实上求解插值函数的过程就是一个求解线性方程组的过程。具体来说，求解插值函数即为已知多项式的x与y值，求解系数；而求解线性方程组为已知系数求解结果。但是系数和解值本身没有区别，根本在于判断哪些是未知数，哪些是已知数，然后构造系数矩阵求解。</h2></li><li><h2 id="高斯消元法和LU分解法"><a href="#高斯消元法和LU分解法" class="headerlink" title="高斯消元法和LU分解法"></a>高斯消元法和LU分解法</h2></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>some basic points of java</title>
      <link href="/archives/c1d6130f.html"/>
      <url>/archives/c1d6130f.html</url>
      
        <content type="html"><![CDATA[<h1 id="javaSE入门笔记"><a href="#javaSE入门笔记" class="headerlink" title="javaSE入门笔记"></a>javaSE入门笔记</h1><ul><li><h2 id="java的几个特性：简单性、面向对象性、可移植性，高性能、分布式、动态性（反射）、多线程、安全性、健壮性。"><a href="#java的几个特性：简单性、面向对象性、可移植性，高性能、分布式、动态性（反射）、多线程、安全性、健壮性。" class="headerlink" title="java的几个特性：简单性、面向对象性、可移植性，高性能、分布式、动态性（反射）、多线程、安全性、健壮性。"></a>java的几个特性：简单性、面向对象性、<strong>可移植性</strong>，高性能、分布式、动态性（反射）、多线程、安全性、健壮性。</h2></li><li><h2 id="java是一种强类型语言，无法对变量进行类型转换（除非强制转换）"><a href="#java是一种强类型语言，无法对变量进行类型转换（除非强制转换）" class="headerlink" title="java是一种强类型语言，无法对变量进行类型转换（除非强制转换）"></a>java是一种强类型语言，无法对变量进行类型转换（除非强制转换）</h2></li><li><h2 id="基本数据类型：int-short-long-byte-boolean-float-double-char"><a href="#基本数据类型：int-short-long-byte-boolean-float-double-char" class="headerlink" title="基本数据类型：int, short, long, byte, boolean, float, double, char"></a>基本数据类型：int, short, long, byte, boolean, float, double, char</h2></li><li><h2 id="引用数据类型：类，接口，数组"><a href="#引用数据类型：类，接口，数组" class="headerlink" title="引用数据类型：类，接口，数组"></a>引用数据类型：类，接口，数组</h2></li><li><h2 id="静态方法的问题"><a href="#静态方法的问题" class="headerlink" title="静态方法的问题"></a>静态方法的问题</h2></li><li><h2 id="static修饰符修饰类变量或者类函数（即在类内部使用的变量或者函数），-final修饰符修饰常量"><a href="#static修饰符修饰类变量或者类函数（即在类内部使用的变量或者函数），-final修饰符修饰常量" class="headerlink" title="static修饰符修饰类变量或者类函数（即在类内部使用的变量或者函数）， final修饰符修饰常量"></a>static修饰符修饰类变量或者类函数（即在类内部使用的变量或者函数）， final修饰符修饰常量</h2><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>public void static main(String[] args){<br>    int a = test(10)<br>}</p><p>public static int test(int a){<br>    return a;<br>}</p><pre><code>+ ## psvm+tab快速生成main函数， soutp+tab生成输出语句+ ## 按住ctrl点击类可以查看源码+ ## main方法的参数通过命令行来传递，注意命令行调用的时候必须在src目录执行，否则会报找不到主类的错误+ ## java中使用栈机制，尽量少用递归，会造成内存崩溃。+ ## 声明数组时压入栈，创建（new）的时候会在堆中开辟内存空间，所有对象均保存在堆中。+ ## 同C++一样一个类中需要有构造器，属性和方法。构造器中无返回值，其对属性进行初始化，若定义了有参构造，则无参构造需要显式定义。new对象的时候即调用构造器。+ ## java中的几种有意思的循环结构的写法```javaint[] numbers = {0,1,2,3,4};for(int x:numbers){    system.out.println(x);}</code></pre><ul><li><h2 id="返回值类型不能作为方法重载的标识符"><a href="#返回值类型不能作为方法重载的标识符" class="headerlink" title="返回值类型不能作为方法重载的标识符"></a>返回值类型不能作为方法重载的标识符</h2><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>public void static main(String[] args){<br>    double a = test(10)//这里实际上调用的是public static int test(int a)方法<br>}</p><p>public static int test(int a){<br>    return “result”;<br>}</p><p>public static double test(double a){<br>    return “result”;<br>}</p><pre><code>+ ## 数组声明、动态初始化后赋值之前会有默认值，例如int的默认值为0```java int[] nums;nums = new int[10];//此时没有赋值，默认值均为 0nums[0] = 1;</code></pre><ul><li><h2 id="java中的类没有多继承，但是接口可以多继承"><a href="#java中的类没有多继承，但是接口可以多继承" class="headerlink" title="java中的类没有多继承，但是接口可以多继承"></a>java中的类没有多继承，但是接口可以多继承</h2><h3 id="对于抽象类（约束）来说，不能new，只能依靠子类去实现。抽象类中可以写普通方法，但是抽象方法必须在抽象类中。"><a href="#对于抽象类（约束）来说，不能new，只能依靠子类去实现。抽象类中可以写普通方法，但是抽象方法必须在抽象类中。" class="headerlink" title="对于抽象类（约束）来说，不能new，只能依靠子类去实现。抽象类中可以写普通方法，但是抽象方法必须在抽象类中。"></a>对于抽象类（约束）来说，不能new，只能依靠子类去实现。抽象类中可以写普通方法，但是抽象方法必须在抽象类中。</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span>  <span class="token class-name">Action</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>即将开始</title>
      <link href="/archives/e3e08109.html"/>
      <url>/archives/e3e08109.html</url>
      
        <content type="html"><![CDATA[<h1 id="即将开始"><a href="#即将开始" class="headerlink" title="即将开始"></a>即将开始</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
